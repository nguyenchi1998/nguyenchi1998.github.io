{"version":3,"sources":["hooks/useNotification.js","containers/Auth/SignUpPage.jsx"],"names":["useNotification","useSnackbar","enqueueSnackbar","closeSnackbar","variant","message","key","Date","now","onClick","useStyles","makeStyles","root","width","RegisterPage","name","t","useTranslation","history","useHistory","classes","notify","useForm","mode","reValidateMode","criteriaMode","register","handleSubmit","errors","useState","isLoading","setIsLoading","new","confirm","showPassword","setShowPassword","onSubmit","data","a","credential","username","trim","email","password","signUp","then","push","PATHS","SIGN_IN_PAGE","catch","error","response","Array","isArray","className","height","display","justifyContent","alignItems","borderColor","border","borderTop","borderLeft","borderRight","color","method","p","mb","inputRef","required","fullWidth","autoFocus","label","maxLength","value","length","pattern","EMAIL_REGEX","htmlFor","id","type","autoComplete","minLength","endAdornment","position","title","onMouseDown","event","preventDefault","edge","labelWidth","getLang","types","mt","disabled","ml","style","cursor"],"mappings":"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","file":"static/js/9.47e5e9da.chunk.js","sourcesContent":["import { useSnackbar } from 'notistack';\n\nconst useNotification = () => {\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  return (variant = 'success', message = '') => {\n    const key = enqueueSnackbar(message, {\n      variant,\n      key: Date.now(),\n      onClick: () => {\n        closeSnackbar(key);\n      },\n    });\n  };\n};\n\nexport default useNotification;\n","import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { Helmet } from 'react-helmet-async';\nimport Button from '@material-ui/core/Button';\nimport { useForm } from 'react-hook-form';\nimport Typography from '@material-ui/core/Typography';\nimport { signUp } from 'services/auth';\nimport Card from '@material-ui/core/Card';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useHistory } from 'react-router-dom';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport FormControl from '@material-ui/core/FormControl';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport Box from '@material-ui/core/Box';\nimport { useTranslation } from 'react-i18next';\nimport { getLang } from 'utils/storage';\nimport Divider from '@material-ui/core/Divider';\nimport { EMAIL_REGEX } from 'config';\nimport useNotification from 'hooks/useNotification';\nimport { PATHS } from 'router/paths';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 600,\n  },\n});\n\nconst RegisterPage = () => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  const classes = useStyles();\n  const notify = useNotification();\n  const { register, handleSubmit, errors } = useForm({\n    mode: 'onChange',\n    reValidateMode: 'onChange',\n    criteriaMode: 'all',\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState({\n    new: false,\n    confirm: false,\n  });\n\n  const handleClickShowPassword = (name) => () => {\n    setShowPassword({ ...showPassword, [name]: !showPassword[name] });\n  };\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault();\n  };\n\n  const onSubmit = async (data) => {\n    const credential = {\n      username: data.username.trim(),\n      email: data.email.trim(),\n      password: data.password.trim(),\n    };\n    setIsLoading(true);\n    signUp(credential)\n      .then(() => {\n        setIsLoading(false);\n        notify('success', 'Account Created Successfully');\n        notify('success', 'Please Sign In Using Your NewAccount');\n        history.push(PATHS.SIGN_IN_PAGE);\n      })\n      .catch((error) => {\n        setIsLoading(false);\n        const message = error.response.data.message[0];\n        if (Array.isArray(message)) {\n          notify('error', message[0]);\n        } else {\n          notify('error', 'Error');\n        }\n      });\n  };\n  const goSignIn = () => {\n    history.push(PATHS.SIGN_IN_PAGE);\n  };\n  return (\n    <>\n      <Helmet>\n        <title>SignUp</title>\n      </Helmet>\n      <Card className={classes.root} variant=\"outlined\">\n        <Box\n          height={48}\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          borderColor=\"grey.300\"\n          border={1}\n          borderTop={0}\n          borderLeft={0}\n          borderRight={0}\n        >\n          <Typography variant=\"button\" color=\"primary\">\n            SignUp\n          </Typography>\n        </Box>\n        <Box>\n          <form method=\"post\" onSubmit={handleSubmit(onSubmit)}>\n            <Box p={2}>\n              <Box mb={2}>\n                <TextField\n                  name=\"username\"\n                  inputRef={register({\n                    required: 'Required',\n                  })}\n                  fullWidth\n                  autoFocus\n                  label=\"Username *\"\n                  variant=\"outlined\"\n                  error={!!errors.username}\n                />\n                {errors.username && (\n                  <Typography variant=\"caption\" color=\"error\">\n                    {errors.username.message}\n                  </Typography>\n                )}\n              </Box>\n              <Box mb={2}>\n                <TextField\n                  label=\"Email *\"\n                  variant=\"outlined\"\n                  fullWidth\n                  inputRef={register({\n                    required: 'Required',\n                    maxLength: {\n                      value: 254,\n                      message: t('validate.maxLength', { length: 254 }),\n                    },\n                    pattern: {\n                      value: EMAIL_REGEX,\n                      message: t('validate.emailFormat'),\n                    },\n                  })}\n                  name=\"email\"\n                  error={!!errors.email}\n                />\n                {errors.email && (\n                  <Typography variant=\"caption\" color=\"error\" display=\"block\">\n                    {errors.email.message}\n                  </Typography>\n                )}\n              </Box>\n              <Box mb={2}>\n                <FormControl variant=\"outlined\" fullWidth>\n                  <InputLabel htmlFor=\"new-password\" error={!!errors.password}>\n                    Password *\n                  </InputLabel>\n                  <OutlinedInput\n                    id=\"new-password\"\n                    type={showPassword.new ? 'text' : 'password'}\n                    name=\"password\"\n                    autoComplete=\"new-password\"\n                    inputRef={register({\n                      required: 'Required',\n                      minLength: 8,\n                      maxLength: 32,\n                      // pattern: /(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])/,\n                    })}\n                    error={!!errors.password}\n                    endAdornment={\n                      <InputAdornment position=\"end\">\n                        <Tooltip\n                          title={\n                            showPassword.new ? 'hidePassword' : 'showPassword'\n                          }\n                        >\n                          <IconButton\n                            onClick={handleClickShowPassword('new')}\n                            onMouseDown={handleMouseDownPassword}\n                            edge=\"end\"\n                          >\n                            {showPassword.new ? (\n                              <VisibilityOff />\n                            ) : (\n                              <Visibility />\n                            )}\n                          </IconButton>\n                        </Tooltip>\n                      </InputAdornment>\n                    }\n                    labelWidth={getLang() === 'en' ? 90 : 140}\n                  />\n                </FormControl>\n                <Typography variant=\"caption\" color=\"error\">\n                  {errors.password?.types?.required && errors.password.message}\n                </Typography>\n              </Box>\n\n              <Box mt={2} display=\"flex\" justifyContent=\"flex-end\">\n                <Button\n                  fullWidth\n                  disabled={isLoading}\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                >\n                  {isLoading ? 'pleaseWait' : 'signUp'}\n                </Button>\n              </Box>\n            </Box>\n          </form>\n        </Box>\n        <Divider />\n        <Box p={2} display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n          <Typography>Already Have An Account</Typography>\n          <Box display=\"inline-block\" ml={1}>\n            <Typography\n              color=\"primary\"\n              style={{ cursor: 'pointer' }}\n              onClick={goSignIn}\n            >\n              Sign In\n            </Typography>\n          </Box>\n        </Box>\n      </Card>\n    </>\n  );\n};\n\nexport default RegisterPage;\n"],"sourceRoot":""}